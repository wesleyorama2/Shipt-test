{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Cloudformation stack for service ECS",
  "Parameters": {
    "Vpc": {
            "Description": "VPC Id",
            "Type": "String"
    },
    "EnvName": {
			"Type": "String",
			"AllowedValues": [
				"Prod",
				"Staging"
    ]},
    "ServName": {
			"Type": "String",
			"Description": "Name of service. *Must be lowercase!*"
	},
    "KeyName": {
      "Description": "Optional: the EC2 Key Pair to allow SSH access to the instances",
      "Type": "String",
      "Default": ""
    },
    "SSHIPRange": {
      "Description": "The IP address range that can be used to SSH to the instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "SubnetsPrivateIds": {
            "Description": "Comma Seperated list of Subnet ID's. Only one subnet per AZ",
            "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "HostedZoneName": {
		"Type": "String",
		"Description": "Route53 hosted zone name"
	},
	"HostedZoneId": {
		"Type": "AWS::Route53::HostedZone::Id",
		"Description": "Id of the Route53 hosted zone"
	},
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "m4.large"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type."
    },
    "DockerImage": {
      "Description": "The docker image to use for service",
      "Type": "String",
      "Default": "tongueroo/sinatra:latest"
    }
  },

  "Mappings": {
    "RegionAmazonECSOptimizedAMIMapping": {
      "us-east-2": {
        "AMI": "ami-bb8eaede"
      },
      "us-east-1": {
        "AMI": "ami-d61027ad"
      },
      "us-west-2": {
        "AMI": "ami-c6f81abe"
      },
      "us-west-1": {
        "AMI": "ami-514e6431"
      },
      "eu-west-2": {
        "AMI": "ami-0a85946e"
      },
      "eu-west-1": {
        "AMI": "ami-bd7e8dc4"
      },
      "eu-central-1": {
        "AMI": "ami-f15ff69e"
      },
      "ap-northeast-1": {
        "AMI": "ami-ab5ea9cd"
      },
      "ap-southeast-2": {
        "AMI": "ami-c3233ba0"
      },
      "ap-southeast-1": {
        "AMI": "ami-ae0b91cd"
      },
      "ca-central-1": {
        "AMI": "ami-32bb0556"
      }
    },
	"EnvStuff": {
		"Staging": {
			"Lower": "staging",
			"Upper": "Staging",
			"Short": "stg",
			"Bucket": "stage"
		},
		"Prod": {
			"Lower": "prod",
			"Upper": "Prod",
			"Short": "Prd",
			"Bucket": "prod"
		}
	}
  },

  "Conditions": {
    "HasKeyName": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "KeyName"}]}]}
  },

  "Resources": {
    "ServiceELBSG": {
		"Type": "AWS::EC2::SecurityGroup",
		"Properties": {
			"GroupDescription": "Security Group for ServiceELB",
			"VpcId": { "Ref": "Vpc" },
			"SecurityGroupIngress": [
				{ "IpProtocol": "tcp", "FromPort": "4567", "ToPort": "4567", "CidrIp": "10.1.0.0/16" }
			],
			"Tags": [
				{ "Key": "Name", "Value": "Service-ELB-SG" },
				{ "Key": "Environment", "Value": { "Ref": "EnvName" } }
			]
		}
    },
    
    "ServiceELB": {
        "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
        "Properties" : {   
            "CrossZone": true, 
            "LoadBalancerName" : { "Fn::Join": ["-", [{ "Ref": "ServName" }, { "Fn::FindInMap": ["EnvStuff", { "Ref": "EnvName" }, "Lower"] }, "ELB"]] },
            "Scheme" : "internal",
            "SecurityGroups" : [{ "Ref": "ServiceELBSG" }],
            "Subnets" : { "Ref": "SubnetsPrivateIds" },
            "Listeners": [{
                "InstancePort": "4567",
                "InstanceProtocol": "HTTP",
                "LoadBalancerPort": "4567",
                "Protocol": "HTTP"
            }],
            "HealthCheck": {
                "HealthyThreshold": "3",
                "Interval": "20",
                "Target": "TCP:4567",
                "Timeout": "2",
                "UnhealthyThreshold": "10"
            },
            "Tags" : [{
				"Key": "Environment",
				"Value": {
					"Ref": "EnvName"
				}
			}, {
				"Key": "Product",
				"Value": "Prod Name"
			}, {
				"Key": "Data Classification",
				"Value": "pii-transit"
			}, {
				"Key": "Purpose",
				"Value": { "Fn::Join": ["-", [{ "Ref": "ServName" }, { "Fn::FindInMap": ["EnvStuff", { "Ref": "EnvName" }, "Lower"] }, "Loadbalancer"]] }
			}]
        }
    },

    "ServiceELBDnsName": {
		"Type": "AWS::Route53::RecordSet",
		"Properties": {
			"HostedZoneId": { "Ref": "HostedZoneId" },
			"Comment": { "Fn::Join": ["-", [{ "Ref": "ServName" }, { "Fn::FindInMap": ["EnvStuff", { "Ref": "EnvName" }, "Lower"] }, "endpoint"]] },
			"Name": {
				"Fn::Join": [".", [
					{ "Ref": "ServName" },
					"elb",
					{ "Ref": "HostedZoneName" }
				]]
			},
			"Type": "CNAME",
			"TTL": "300",
			"ResourceRecords": [
				{ "Fn::GetAtt": ["ServiceELB", "DNSName"] }
			]
		}
    },
    
    "ECSServiceRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ecs.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"ecs-service",
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:DeregisterTargets",
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "elasticloadbalancing:RegisterTargets",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },

    "EC2Role":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"ecs-service",
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "ecs:*",
                    "elasticloadbalancing:Describe*",
                    "logs:CreateLogStream",
                    "s3:*",
                    "cloudformation:*",
                    "logs:PutLogEvents"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },

    "ServiceECSInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "EC2Role"
          }
        ]
      }
    },

    "ServiceSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SecurityGroup for service instances",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": {"Ref": "SSHIPRange"} },
          
          { "IpProtocol": "tcp", "FromPort": "4567", "ToPort": "4567", "SourceSecurityGroupId": {"Ref": "ServiceELBSG"}
          }
        ]
      }
    },

    "ServiceSGIngress": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": { "Ref": "ServiceSG" },
				"IpProtocol": "-1",
				"ToPort": "-1",
				"FromPort": "-1",
				"SourceSecurityGroupId": { "Ref": "ServiceSG" }
		    }
    },
    
    "ServiceCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": "service-cluster"
      }
    },

    "ServiceTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": "service",
        "NetworkMode": "bridge",
        "ContainerDefinitions": [
          {
            "Name": "service",
            "Image": {
              "Ref": "DockerImage"
            },
            "Essential": true,
            "Cpu": "1024",
            "Memory": "512",
            "PortMappings": [
              {
                "HostPort" : 4567,
                "ContainerPort": 4567,
                "Protocol": "tcp"
              }
            ]
          }
        ]
      }
    },

    "ServiceECSService": {
      "DependsOn": ["ServiceELB"],
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": "service-cluster",
        "DesiredCount": 2,
        "ServiceName": "service",
        "TaskDefinition": {
          "Ref": "ServiceTaskDefinition"
        },
        "Role" : { "Ref" : "ECSServiceRole" },
        "LoadBalancers": [
          {
            "LoadBalancerName": { "Fn::Join": ["-", [{ "Ref": "ServName" }, { "Fn::FindInMap": ["EnvStuff", { "Ref": "EnvName" }, "Lower"] }, "ELB"]] },
            "ContainerPort": "4567",
            "ContainerName": "service"
          }
        ]
      }
    },

    "ServiceECSLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": false,
        "ImageId": {
          "Fn::FindInMap": [
            "RegionAmazonECSOptimizedAMIMapping",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "IamInstanceProfile": {
          "Ref": "ServiceECSInstanceProfile"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {"Fn::If": ["HasKeyName", {"Ref": "KeyName"}, {"Ref": "AWS::NoValue"}]},
        "SecurityGroups": [
          {
            "Ref": "ServiceSG"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdcz",
            "Ebs": {
              "VolumeSize": "24",
              "DeleteOnTermination": true
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "yum install -y aws-cli\n",
                "\n",
                "echo 'ECS_CLUSTER=service-cluster' >> /etc/ecs/ecs.config\n",
                "#Mount EFS volume\n",
                "yum install -y nfs-utils\n",
                "EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`\n",
                "EC2_REGION=",
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          }
        }
      }
    },

    "ServiceECSAutoScaling": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": 
          {
            "Ref": "SubnetsPrivateIds"
          },
        "LaunchConfigurationName": {
          "Ref": "ServiceECSLaunchConfiguration"
        },
        "MinSize": "1",
        "MaxSize": "3",
        "DesiredCapacity": "2",
        "HealthCheckType": "EC2",
        "HealthCheckGracePeriod": "400",
        "Tags": [
          {
            "Key": "Name",
            "Value": "service-ecs-instance",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },

    "ServiceClusterScaleUpPolicy": {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref": "ServiceECSAutoScaling" },
        "EstimatedInstanceWarmup" : 60,
        "MetricAggregationType" : "Average",
        "PolicyType" : "StepScaling",
        "StepAdjustments" : [ {
          "MetricIntervalLowerBound" : 0,
          "ScalingAdjustment" : 1
        }]
      }
    },

    "ServiceClusterScaleUpAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "CPU utilization peaked at 70% during the last minute",
        "AlarmName" : "ServiceClusterScaleUpAlarm",
        "AlarmActions": [ { "Ref": "ServiceClusterScaleUpPolicy" } ],
        "Dimensions" : [{
          "Name": "ClusterName",
          "Value": "service-cluster"
        }],
        "MetricName" : "CPUReservation",
        "Namespace" : "AWS/ECS",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "Statistic" : "Maximum",
        "Threshold" : 70,
        "Period" : 60,
        "EvaluationPeriods": 1,
        "TreatMissingData" : "notBreaching"
      }
    },

    "ServiceScaleDownPolicy": {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "PercentChangeInCapacity",
        "AutoScalingGroupName" : { "Ref": "ServiceECSAutoScaling" },
        "Cooldown"             : "120",
        "ScalingAdjustment"    : "-50"
      }
    },

    "ServiceScaleDownAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "CPU utilization is under 50% for the last 10 min (change 10 min to 45 min for prod use as you pay by the hour )",
        "AlarmName" : "ServiceClusterScaleDownAlarm",
        "AlarmActions": [ { "Ref": "ServiceScaleDownPolicy" } ],
        "Dimensions" : [{
          "Name": "ClusterName",
          "Value": "service-cluster"
        }],
        "MetricName" : "CPUReservation",
        "Namespace" : "AWS/ECS",
        "ComparisonOperator" : "LessThanThreshold",
        "Statistic" : "Maximum",
        "Threshold" : 50,
        "Period" : 600,
        "EvaluationPeriods": 1,
        "TreatMissingData" : "notBreaching"
      }
    },

    "ECRedisSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SecurityGroup for service instances",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [          
          { "IpProtocol": "tcp", "FromPort": "6379", "ToPort": "6379", "SourceSecurityGroupId": {"Ref": "ServiceSG"}
          }
        ]
      }
    },

    "ECRedisSubGroup":{
        "Type" : "AWS::ElastiCache::SubnetGroup",
        "Properties" : {
            "CacheSubnetGroupName" : "ServiceCacheSubGroup",
            "Description" : "Subnet group for service",
            "SubnetIds" : {"Ref" :"SubnetsPrivateIds"}
        }
    },

    "ECRedis" : {
        "Type" : "AWS::ElastiCache::CacheCluster",
        "Properties" :
        {
            "AutoMinorVersionUpgrade" : false,
            "CacheNodeType" : "cache.t2.micro",
            "Engine" : "redis",
            "NumCacheNodes" : "1",
            "VpcSecurityGroupIds": [{ "Ref": "ECRedisSG" }],
            "CacheSubnetGroupName": {"Ref" : "ECRedisSubGroup"}
        }
    }
  },
  "Outputs" : {

  }
}